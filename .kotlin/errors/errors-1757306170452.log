kotlin version: 2.2.0
error message: org.jetbrains.kotlin.util.FileAnalysisException: While analysing C:/Users/ACER/AndroidStudioProjects/TMPP/app/src/main/java/com/teladanprimaagro/tmpp/data/PanenData.kt:7:1: java.lang.IllegalStateException: Each FIR element should have it's own `visit` overload, but got FirErrorExpressionImpl here
	at org.jetbrains.kotlin.util.AnalysisExceptionsKt.wrapIntoFileAnalysisExceptionIfNeeded(AnalysisExceptions.kt:57)
	at org.jetbrains.kotlin.fir.FirCliExceptionHandler.handleExceptionOnFileAnalysis(Utils.kt:257)
	at org.jetbrains.kotlin.fir.backend.Fir2IrConverter.runSourcesConversion(Fir2IrConverter.kt:711)
	at org.jetbrains.kotlin.fir.backend.Fir2IrConverter.access$runSourcesConversion(Fir2IrConverter.kt:71)
	at org.jetbrains.kotlin.fir.backend.Fir2IrConverter$Companion.generateIrModuleFragment(Fir2IrConverter.kt:701)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.runFir2IrConversion(convertToIr.kt:163)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.convertToIrAndActualize(convertToIr.kt:127)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize(convertToIr.kt:97)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize$default(convertToIr.kt:72)
	at org.jetbrains.kotlin.cli.jvm.compiler.legacy.pipeline.JvmCompilerPipelineKt.convertToIrAndActualizeForJvm(jvmCompilerPipeline.kt:109)
	at org.jetbrains.kotlin.cli.jvm.compiler.legacy.pipeline.JvmCompilerPipelineKt.convertAnalyzedFirToIr(jvmCompilerPipeline.kt:85)
	at org.jetbrains.kotlin.kapt.FirKaptAnalysisHandlerExtension.contextForStubGeneration(FirKaptAnalysisHandlerExtension.kt:221)
	at org.jetbrains.kotlin.kapt.FirKaptAnalysisHandlerExtension.doAnalysis(FirKaptAnalysisHandlerExtension.kt:117)
	at org.jetbrains.kotlin.fir.extensions.FirAnalysisHandlerExtension$Companion.analyze(FirAnalysisHandlerExtension.kt:29)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmFrontendPipelinePhase.executePhase(JvmFrontendPipelinePhase.kt:84)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmFrontendPipelinePhase.executePhase(JvmFrontendPipelinePhase.kt:56)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:68)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:58)
	at org.jetbrains.kotlin.config.phaser.NamedCompilerPhase.invoke(CompilerPhase.kt:102)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:22)
	at org.jetbrains.kotlin.config.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:53)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.runPhasedPipeline(AbstractCliPipeline.kt:109)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.execute(AbstractCliPipeline.kt:68)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:78)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:44)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:90)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.kt:352)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunnerBase.runCompiler(IncrementalJvmCompilerRunnerBase.kt:175)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunnerBase.runCompiler(IncrementalJvmCompilerRunnerBase.kt:38)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:504)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:421)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally$lambda$10$compile(IncrementalCompilerRunner.kt:254)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally(IncrementalCompilerRunner.kt:272)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:124)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:679)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:93)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1806)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalStateException: Each FIR element should have it's own `visit` overload, but got FirErrorExpressionImpl here
	at org.jetbrains.kotlin.fir.backend.Fir2IrImplicitCastInserter.visitElement(Fir2IrImplicitCastInserter.kt:31)
	at org.jetbrains.kotlin.fir.backend.Fir2IrImplicitCastInserter.visitElement(Fir2IrImplicitCastInserter.kt:29)
	at org.jetbrains.kotlin.fir.visitors.FirVisitor.visitErrorExpression(FirVisitor.kt:60)
	at org.jetbrains.kotlin.fir.expressions.FirErrorExpression.accept(FirErrorExpression.kt:32)
	at org.jetbrains.kotlin.fir.backend.Fir2IrVisitor.convertToIrExpression$fir2ir(Fir2IrVisitor.kt:1022)
	at org.jetbrains.kotlin.fir.backend.Fir2IrVisitor.convertToIrExpression$fir2ir$default(Fir2IrVisitor.kt:986)
	at org.jetbrains.kotlin.fir.backend.generators.CallAndReferenceGenerator.convertArgument(CallAndReferenceGenerator.kt:1064)
	at org.jetbrains.kotlin.fir.backend.generators.CallAndReferenceGenerator.convertArguments(CallAndReferenceGenerator.kt:1606)
	at org.jetbrains.kotlin.fir.backend.generators.CallAndReferenceGenerator.applyArgumentsWithReorderingIfNeeded(CallAndReferenceGenerator.kt:1543)
	at org.jetbrains.kotlin.fir.backend.generators.CallAndReferenceGenerator.applyCallArguments(CallAndReferenceGenerator.kt:1501)
	at org.jetbrains.kotlin.fir.backend.generators.CallAndReferenceGenerator.applyReceiversAndArguments(CallAndReferenceGenerator.kt:1380)
	at org.jetbrains.kotlin.fir.backend.generators.CallAndReferenceGenerator.applyReceiversAndArguments$default(CallAndReferenceGenerator.kt:1365)
	at org.jetbrains.kotlin.fir.backend.generators.CallAndReferenceGenerator.convertToIrConstructorCall(CallAndReferenceGenerator.kt:980)
	at org.jetbrains.kotlin.fir.backend.generators.AnnotationGenerator.toIrAnnotations(AnnotationGenerator.kt:32)
	at org.jetbrains.kotlin.fir.backend.generators.AnnotationGenerator.generate(AnnotationGenerator.kt:36)
	at org.jetbrains.kotlin.fir.backend.generators.ClassMemberGenerator.convertClassContent(ClassMemberGenerator.kt:94)
	at org.jetbrains.kotlin.fir.backend.Fir2IrVisitor.visitRegularClass(Fir2IrVisitor.kt:208)
	at org.jetbrains.kotlin.fir.backend.Fir2IrVisitor.visitRegularClass(Fir2IrVisitor.kt:66)
	at org.jetbrains.kotlin.fir.declarations.FirRegularClass.accept(FirRegularClass.kt:49)
	at org.jetbrains.kotlin.fir.backend.Fir2IrVisitor.toIrDeclaration(Fir2IrVisitor.kt:117)
	at org.jetbrains.kotlin.fir.backend.Fir2IrVisitor.visitFile(Fir2IrVisitor.kt:108)
	at org.jetbrains.kotlin.fir.backend.Fir2IrVisitor.visitFile(Fir2IrVisitor.kt:66)
	at org.jetbrains.kotlin.fir.declarations.FirFile.accept(FirFile.kt:43)
	at org.jetbrains.kotlin.fir.backend.Fir2IrConverter.runSourcesConversion(Fir2IrConverter.kt:107)
	... 49 more


